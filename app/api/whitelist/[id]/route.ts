import { NextRequest, NextResponse } from "next/server";
import database from "@/lib/db";
import { auth } from "@/lib/auth";
import { hasWhitelistPermissions } from "@/lib/utils";
import { headers } from "next/headers";
import axios from "axios";
import { 
    addWhitelistRole,
    removeWaitingRole,
    addWaitingRole,
    removeWhitelistRole,
} from "@/lib/discord-log";

const DISCORD_GUILD_ID = process.env.DISCORD_GUILD_ID!;
const DISCORD_BOT_TOKEN = process.env.DISCORD_BOT_TOKEN!;

// PATCH - Schv√°lit/odm√≠tnout whitelist ≈æ√°dost (pouze pro adminy)
export async function PATCH(
    request: NextRequest,
    { params }: { params: Promise<{ id: string }> }
) {
    try {
        const session = await auth.api.getSession({
            headers: await headers(),
        });

        if (!session) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        }

        // Z√≠sk√°n√≠ Discord account ID a kontrola opr√°vnƒõn√≠
        const [accountRows] = await database.execute(
            "SELECT accountId FROM account WHERE userId = ? AND providerId = 'discord' LIMIT 1",
            [session.user.id]
        );

        const accountRow = Array.isArray(accountRows) ? (accountRows[0] as any) : null;
        const discordId = accountRow?.accountId;

        if (!discordId) {
            return NextResponse.json({ error: "No Discord account linked" }, { status: 404 });
        }

        // Z√≠sk√°n√≠ rol√≠ z Discord API a kontrola opr√°vnƒõn√≠
        try {
            const memberResponse = await axios.get(
                `https://discord.com/api/v10/guilds/${DISCORD_GUILD_ID}/members/${discordId}`,
                {
                    headers: {
                        Authorization: `Bot ${DISCORD_BOT_TOKEN}`,
                    },
                }
            );

            const userRoles: string[] = memberResponse.data.roles || [];

            // Kontrola whitelist adder pr√°v
            if (!hasWhitelistPermissions(userRoles)) {
                return NextResponse.json({ error: "Forbidden - insufficient permissions" }, { status: 403 });
            }
        } catch (error) {
            console.error("Error fetching Discord roles:", error);
            return NextResponse.json({ error: "Error verifying permissions" }, { status: 500 });
        }

        const body = await request.json();
        const { status } = body as { status?: 'pending' | 'approved' | 'rejected' };

        if (!status || !['pending', 'approved', 'rejected'].includes(status)) {
            return NextResponse.json(
                { error: "Invalid status. Must be 'pending', 'approved' or 'rejected'" },
                { status: 400 }
            );
        }

        const { id: requestId } = await params;

        // Kontrola existence ≈æ√°dosti a z√≠sk√°n√≠ detail≈Ø
        const [existingRequest] = await database.execute(
            "SELECT id, user_id, form_data, serial_number FROM whitelist_requests WHERE id = ?",
            [requestId]
        );

        if (!Array.isArray(existingRequest) || existingRequest.length === 0) {
            return NextResponse.json(
                { error: "Whitelist ≈æ√°dost nenalezena" },
                { status: 404 }
            );
        }

        const whitelistRequest = existingRequest[0] as any;

        // Z√≠sk√°n√≠ Discord ID ≈æadatele z datab√°ze (ne z formul√°≈ôe!)
        let applicantDiscordId: string | null = null;
        let formData: any = null;
        
        try {
            // Parsujeme form_data pro dodateƒçn√© informace
            formData = JSON.parse(whitelistRequest.form_data);
            
            // Discord ID V≈ΩDY z√≠sk√°v√°me z datab√°ze √∫ƒçt≈Ø, ne z formul√°≈ôe
            const [userAccountRows] = await database.execute(
                "SELECT accountId FROM account WHERE userId = ? AND providerId = 'discord' LIMIT 1",
                [whitelistRequest.user_id]
            );
            const userAccount = Array.isArray(userAccountRows) ? userAccountRows[0] as any : null;
            applicantDiscordId = userAccount?.accountId;
            
            if (!applicantDiscordId) {
                console.error(`Nepoda≈ôilo se naj√≠t Discord ID pro user_id: ${whitelistRequest.user_id}`);
            }
        } catch (error) {
            console.error("Chyba p≈ôi z√≠sk√°v√°n√≠ Discord ID ≈æadatele:", error);
        }

        // Z√≠sk√°n√≠ jm√©na adminstr√°tora kdo schvaluje
        const approverName = session.user.name || "Nezn√°m√Ω admin";
        
        // Aktualizace statusu
        await database.execute(
            "UPDATE whitelist_requests SET status = ?, updated_at = NOW() WHERE id = ?",
            [status, requestId]
        );

        // Discord integrace (notifikace vypnuta)
        const discordSuccess = false;
        let roleSuccess = false;
        let discordError: string | null = null;

        console.log(`üöÄ Zahajuji Discord integraci pro ≈æ√°dost ${requestId}`);
        console.log(`Discord ID ≈æadatele: ${applicantDiscordId}`);
        console.log(`Status: ${status}`);

        if (applicantDiscordId) {
            try {
                // Notifikace na Discord jsou deaktivov√°ny

                // Spr√°va rol√≠ podle statusu
                if (status === 'approved') {
                    console.log(`üéØ P≈ôid√°v√°m whitelist roli...`);
                    // Pro schv√°len√≠: p≈ôid√°me whitelist roli (automaticky odebere waiting roli)
                    roleSuccess = await addWhitelistRole(applicantDiscordId);
                    if (!roleSuccess) {
                        console.warn(`‚ö†Ô∏è Nepoda≈ôilo se p≈ôidat whitelist roli u≈æivateli ${applicantDiscordId}`);
                    } else {
                        console.log(`‚úÖ Whitelist role √∫spƒõ≈°nƒõ p≈ôid√°na`);
                    }
                } else if (status === 'rejected') {
                    // Pro zam√≠tnut√≠: odebereme whitelist roli (pokud existuje) a tak√© waiting roli
                    console.log(`üö´ Odeb√≠r√°m whitelist roli (pokud existuje) a waiting roli...`);
                    const removedWhitelist = await removeWhitelistRole(applicantDiscordId);
                    const removedWaiting = await removeWaitingRole(applicantDiscordId);
                    roleSuccess = removedWhitelist || removedWaiting; // true pokud se poda≈ôilo aspo≈à nƒõco relevantn√≠ho
                    if (!roleSuccess) {
                        console.warn(`‚ö†Ô∏è Nepoda≈ôilo se aktualizovat role pro odm√≠tnut√≠ (user ${applicantDiscordId})`);
                    } else {
                        console.log(`‚úÖ Role aktualizov√°ny pro odm√≠tnut√≠ (whitelist removed: ${removedWhitelist}, waiting removed: ${removedWaiting})`);
                    }
                } else if (status === 'pending') {
                    // Pro vr√°cen√≠ na ƒçek√°n√≠: odebereme whitelist roli (pokud existuje) a p≈ôid√°me waiting roli
                    console.log(`‚è≥ Vr√°cen√≠ na ƒçek√°n√≠: odeb√≠r√°m whitelist roli a p≈ôid√°v√°m waiting roli...`);
                    const removedWhitelist = await removeWhitelistRole(applicantDiscordId);
                    const addedWaiting = await addWaitingRole(applicantDiscordId);
                    roleSuccess = removedWhitelist || addedWaiting;
                    if (!roleSuccess) {
                        console.warn(`‚ö†Ô∏è Nepoda≈ôilo se aktualizovat role pro pending (user ${applicantDiscordId})`);
                    } else {
                        console.log(`‚úÖ Role aktualizov√°ny pro pending (whitelist removed: ${removedWhitelist}, waiting added: ${addedWaiting})`);
                    }
                }
            } catch (error) {
                console.error("‚ùå Chyba p≈ôi Discord integraci:", error);
                discordError = error instanceof Error ? error.message : 'Nezn√°m√° chyba';
                // Nep≈ôeru≈°ujeme proces kv≈Øli Discord chybƒõ
            }
        } else {
            console.error(`‚ùå Nepoda≈ôilo se z√≠skat Discord ID pro whitelist ≈æ√°dost ${requestId}`);
            console.error(`User ID ≈æ√°dosti: ${whitelistRequest.user_id}`);
            discordError = 'Nepoda≈ôilo se z√≠skat Discord ID u≈æivatele';
        }

        return NextResponse.json({
            message: status === 'approved' 
                ? 'Whitelist ≈æ√°dost byla schv√°lena' 
                : status === 'rejected' 
                    ? 'Whitelist ≈æ√°dost byla odm√≠tnuta' 
                    : 'Whitelist ≈æ√°dost byla vr√°cena na vyhodnocen√≠',
            discordNotified: false,
            roleUpdated: roleSuccess,
            discordError: discordError,
            discordId: applicantDiscordId
        });
    } catch (error) {
        console.error("Error updating whitelist request:", error);
        return NextResponse.json(
            { error: "Internal server error" },
            { status: 500 }
        );
    }
}

// GET - Z√≠skat detail konkr√©tn√≠ whitelist ≈æ√°dosti
export async function GET(
    request: NextRequest,
    { params }: { params: Promise<{ id: string }> }
) {
    try {
        const session = await auth.api.getSession({
            headers: await headers(),
        });

        if (!session) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        }

        // Z√≠sk√°n√≠ Discord account ID a kontrola opr√°vnƒõn√≠
        const [accountRows] = await database.execute(
            "SELECT accountId FROM account WHERE userId = ? AND providerId = 'discord' LIMIT 1",
            [session.user.id]
        );

        const accountRow = Array.isArray(accountRows) ? (accountRows[0] as any) : null;
        const discordId = accountRow?.accountId;

        if (!discordId) {
            return NextResponse.json({ error: "No Discord account linked" }, { status: 404 });
        }

        // Z√≠sk√°n√≠ rol√≠ z Discord API a kontrola opr√°vnƒõn√≠
        try {
            const memberResponse = await axios.get(
                `https://discord.com/api/v10/guilds/${DISCORD_GUILD_ID}/members/${discordId}`,
                {
                    headers: {
                        Authorization: `Bot ${DISCORD_BOT_TOKEN}`,
                    },
                }
            );

            const userRoles: string[] = memberResponse.data.roles || [];

            // Kontrola whitelist adder pr√°v
            if (!hasWhitelistPermissions(userRoles)) {
                return NextResponse.json({ error: "Forbidden - insufficient permissions" }, { status: 403 });
            }
        } catch (error) {
            console.error("Error fetching Discord roles:", error);
            return NextResponse.json({ error: "Error verifying permissions" }, { status: 500 });
        }

        const { id: requestId } = await params;

        const [rows] = await database.execute(
            "SELECT id, user_id, form_data, status, serial_number, created_at, updated_at FROM whitelist_requests WHERE id = ?",
            [requestId]
        );

        if (!Array.isArray(rows) || rows.length === 0) {
            return NextResponse.json(
                { error: "Whitelist ≈æ√°dost nenalezena" },
                { status: 404 }
            );
        }

        return NextResponse.json({ request: rows[0] });
    } catch (error) {
        console.error("Error fetching whitelist request:", error);
        return NextResponse.json(
            { error: "Internal server error" },
            { status: 500 }
        );
    }
}